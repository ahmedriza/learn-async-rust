//
// This is the template file that needs to be run through `corofy_waker` 
// in order to generate the state machine transformation for the async code.
//

use std::time::Instant;
use chrono::Local;
use std::thread::Builder;

use learn_async_rust::{
    executor::{self, Executor, Waker},
    future_with_waker::{Future, PollState},
    http_waker::Http, runtime_two,
};

//
// To get the number of cores on a Mac:
// `sysctl -n hw.ncpu`
//
// This will send 60 HTTP GET requests in total.
//
fn main() {
    let start = Instant::now();
    let mut executor = runtime_two::init();
    let mut handles = vec![];

    // Create 11 parallel executors (each in their own thread) each running 
    // 5 tasks.
    for i in 1..12 {
        let name = format!("exec-{i}");
        let h = Builder::new().name(name).spawn(move || {
            let mut executor = Executor::new();
            executor.block_on(async_main());
        }).unwrap();
        handles.push(h);
    }
  
    // Submit another 5 tasks on the `main` thread.
    executor.block_on(async_main());
    handles.into_iter().for_each(|h| h.join().unwrap());

    println!("\nELAPSED TIME: {}", start.elapsed().as_secs_f32());
}

coroutine fn request(i: usize) {
    let path = format!("/{}/HelloWorld-{i}", i * 1000);
    let txt = Http::get(path).wait;
    let now = Local::now();
    println!("{now} [{}] Response:\n{txt}", std::thread::current().name().unwrap());
    println!();
}

coroutine fn async_main() {
    println!("Program starting");

    for i in 0..5 {
        let future = request(i);
        executor::spawn(future);
    }
}
